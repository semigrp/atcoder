name: Cargo Compete Test

on:
  push:
    branches:
      - main
      - "**"
  pull_request:
    branches:
      - main
      - "**"
    paths:
      - '**/src/bin/**.rs'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Cargo Compete
        run: cargo install cargo-compete

      - name: Get list of changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            BASE_SHA=$(git rev-parse HEAD^)
            HEAD_SHA=$(git rev-parse HEAD)
          fi
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"
          git diff --name-only $BASE_SHA $HEAD_SHA > changed_files.txt
          cat changed_files.txt

      - name: Extract problem directories and names
        id: extract-problems
        run: |
          #!/bin/bash
          declare -A problem_dirs
          while IFS= read -r file; do
            if [[ "$file" =~ ^(.*)/src/bin/(.*)\.rs$ ]]; then
              dir="${BASH_REMATCH[1]}"
              problem="${BASH_REMATCH[2]}"
              problem_dirs["$dir"]+="$problem "
            fi
          done < changed_files.txt

          # Prepare outputs
          outputs=""
          for dir in "${!problem_dirs[@]}"; do
            problems="${problem_dirs[$dir]}"
            outputs+="$dir:$problems;"
          done

          # Remove trailing semicolon
          outputs="${outputs%;}"

          echo "problems_and_dirs=$outputs" >> $GITHUB_OUTPUT
          echo "Detected problems and directories: $outputs"

      - name: Run Cargo Compete Test for changed problems
        if: steps.extract-problems.outputs.problems_and_dirs != ''
        run: |
          IFS=';' read -ra entries <<< "${{ steps.extract-problems.outputs.problems_and_dirs }}"
          for entry in "${entries[@]}"; do
            IFS=':' read -r dir problems <<< "$entry"
            echo "Entering directory: $dir"
            cd "$dir"
            echo "Retrieving testcases"
            cargo compete retrieve testcases --overwrite
            for problem in $problems; do
              echo "Testing problem: $problem"
              cargo compete test "$problem"
            done
            cd - > /dev/null
          done

      - name: No problems changed
        if: steps.extract-problems.outputs.problems_and_dirs == ''
        run: echo "No AtCoder problems were changed. Skipping tests."